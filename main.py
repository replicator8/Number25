#Задание № 25.1

def F(n):      #создадим функцию, которая возвращает мин и макс делители или 0 
  d = 2        #делители начинаем перебирать от 2, так как не учитываем 1 и само число 
  while d * d <= n:            #делители перебираем до корня для ускорения процесса 
    if n % d == 0:             #нашли первый делитель, значит он - мин, а его напарник - макс 
      return n // d - d        #возвращаем из разность и выходим из функции 
    d += 1                     #в случае если делитель не нашелся увеличиваем его на 1 
  return 0                     #если в цикле while не нашелся делитель - возвращаем 0, так как их нет 
cnt = 0 
for i in range(850000 + 1, 10**10):     #перебираем все числа бОльшие 850000, до любого большого числа 
  f = F(i)                              #вызываем функцию для переменной i 
  if f != 0 and f % 7 == 0:             #если разность не равна 0 и делится нацело на 7, то выводим число и разность 
    print(i, f) cnt += 1                #увеличиваем счетчик на 1 и если он равен 6, то выходим из цикла 
    if cnt == 6: 
      break

''' Result : 850003 121422
             850005 283332
             850014 425005
             850028 425012
             850042 425019
             850047 283346 '''

#Задание № 25.2 1 Способ 

for i in range(105,108): #будем перебирать числа от 100000 до ограничения в 10**8 
  if i % 141 == 0: #если число делится на 141, то проверяем следующее условие 
    if i % 10 == 7 and str(i)[:4] == '1234': #если последняя цифра числа 7 и первые 4 цифры 1234, то выводим число и рез деления 
      print(i, i // 141) #str нужно, чтобы превратить число в строку и срезом взять первые 4 цифры

''' Result : 1234737 8757 
             12341307 87527 
             12342717 87537 
             12344127 87547 
             12345537 87557 
             12346947 87567 
             12348357 87577 
             12349767 87587 ''' 
#Задание № 25.2 2 Способ 
if 12347 % 141 == 0: #проверяем делится ли минимальное число на 141 print(12347, 12347 // 141) for x in range(10): #когда * это 1 цифра s = '1234' + str(x) + '7' #создаем строку и перебираем в х все числа на [0 ; 9] if int(s) % 141 == 0: #проверка на делимость и вывод print(int(s), int(s) // 141)

for x in range(10): #когда * это 2 цифры for y in range(10): s = '1234' + str(x) + str(y) + '7' #создаем строку и перебираем в х и y все числа на [0 ; 9] if int(s) % 141 == 0: print(int(s), int(s) // 141) for x in range(10): #когда * это 3 цифры for y in range(10): #создаем строку и перебираем в х, y и z все числа на [0 ; 9] for z in range(10): s = '1234' + str(x) + str(y) + str(z) + '7' if int(s) % 141 == 0: print(int(s), int(s) // 141)

''' Result : 1234737 8757 12341307 87527 12342717 87537 12344127 87547 12345537 87557 12346947 87567 12348357 87577 12349767 87587 '''

#Задание № 25.3 
def divs(n):     #создадим функцию divs, возвращающую отсортированный список делителей числа 
  d = 2          #делители перебираем от 2, так как не включаем 1 и само число 
  s = []         #создадим пустой список 
  while d * d < n:       #перебираем делители до квадротного корня числа не включая для избежания повторений 
    if n % d == 0:        #если нашли делитель добавляем его и его напарника через n // d в список методом append() 
      s.append(d) 
      s.append(n // d) 
    d += 1                #увеличиваем делитель на 1 
 if d * d == n:           #проверяем извлекается ли корень из числа и добавляем в массив 
  s.append(d) 
  return sorted(s)        #возвращаем отсортированный список методом sorted() 
for i in range(105000000, 115000000 + 1):         #перебираем числа от 105000000 до 115000000 включительно 
  if i ** 0.5 == int(i ** 0.5):                   #проверяем извлекается ли из числа корень, так как нечетное кол во делитлей есть только у таких чисел 
    M = divs(i)                                   #вызываем функцию divs для числа i 
    if len(M) == 3:                               #проверяем количество делителей числа методом len() 
      print(i, M[-1])                             #выводим число и масимальный делиель срезом М[-1] - последний делеитель(максимальный) в отсортированном списке

''' Result : 112550881 1092727 '''
